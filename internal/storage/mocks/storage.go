// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/nastradamus39/ya_practicum_go_advanced/internal/types"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// DeleteByHash mocks base method.
func (m *Mockrepository) DeleteByHash(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByHash", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByHash indicates an expected call of DeleteByHash.
func (mr *MockrepositoryMockRecorder) DeleteByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByHash", reflect.TypeOf((*Mockrepository)(nil).DeleteByHash), arg0)
}

// FindByHash mocks base method.
func (m *Mockrepository) FindByHash(hash string) (bool, *types.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHash", hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*types.URL)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByHash indicates an expected call of FindByHash.
func (mr *MockrepositoryMockRecorder) FindByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHash", reflect.TypeOf((*Mockrepository)(nil).FindByHash), hash)
}

// FindByUUID mocks base method.
func (m *Mockrepository) FindByUUID(uuid string) (bool, map[string]*types.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(map[string]*types.URL)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockrepositoryMockRecorder) FindByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*Mockrepository)(nil).FindByUUID), uuid)
}

// Save mocks base method.
func (m *Mockrepository) Save(url *types.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockrepositoryMockRecorder) Save(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*Mockrepository)(nil).Save), url)
}

// Mockstore is a mock of store interface.
type Mockstore struct {
	ctrl     *gomock.Controller
	recorder *MockstoreMockRecorder
}

func (m *Mockstore) Statistic() types.Statistic {
	//TODO implement me
	panic("implement me")
}

// MockstoreMockRecorder is the mock recorder for Mockstore.
type MockstoreMockRecorder struct {
	mock *Mockstore
}

// NewMockstore creates a new mock instance.
func NewMockstore(ctrl *gomock.Controller) *Mockstore {
	mock := &Mockstore{ctrl: ctrl}
	mock.recorder = &MockstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstore) EXPECT() *MockstoreMockRecorder {
	return m.recorder
}

// DeleteByHash mocks base method.
func (m *Mockstore) DeleteByHash(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByHash", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByHash indicates an expected call of DeleteByHash.
func (mr *MockstoreMockRecorder) DeleteByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByHash", reflect.TypeOf((*Mockstore)(nil).DeleteByHash), arg0)
}

// Drop mocks base method.
func (m *Mockstore) Drop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Drop")
}

// Drop indicates an expected call of Drop.
func (mr *MockstoreMockRecorder) Drop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*Mockstore)(nil).Drop))
}

// FindByHash mocks base method.
func (m *Mockstore) FindByHash(hash string) (bool, *types.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHash", hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*types.URL)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByHash indicates an expected call of FindByHash.
func (mr *MockstoreMockRecorder) FindByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHash", reflect.TypeOf((*Mockstore)(nil).FindByHash), hash)
}

// FindByUUID mocks base method.
func (m *Mockstore) FindByUUID(uuid string) (map[string]*types.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", uuid)
	ret0, _ := ret[0].(map[string]*types.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockstoreMockRecorder) FindByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*Mockstore)(nil).FindByUUID), uuid)
}

// Ping mocks base method.
func (m *Mockstore) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockstoreMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*Mockstore)(nil).Ping))
}

// Save mocks base method.
func (m *Mockstore) Save(url *types.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockstoreMockRecorder) Save(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*Mockstore)(nil).Save), url)
}

// SaveBatch mocks base method.
func (m *Mockstore) SaveBatch(urls []*types.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockstoreMockRecorder) SaveBatch(urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*Mockstore)(nil).SaveBatch), urls)
}
